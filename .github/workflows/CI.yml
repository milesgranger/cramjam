name: CI

on:
  pull_request:
  release:
    types:
      - released
      - prereleased

jobs:
  macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          target: aarch64-apple-darwin
          profile: minimal
          default: true
      - name: Build
        run: cargo build --release
      - name: Tests
        run: cargo test --no-default-features --release
      - name: Build wheels - x86_64
        uses: messense/maturin-action@v1
        with:
          target: x86_64
          args: -i python --release --out dist --sdist
      - name: Install built wheel - x86_64
        run: |
          pip install cramjam --no-index --find-links dist --force-reinstall
      - name: Build wheels - universal2
        if: ${{ matrix.python-version >= '3.8' || matrix.python-version == '3.10' }}
        uses: messense/maturin-action@v1
        with:
          args: -i python --release --universal2 --out dist
      - name: Install built wheel - universal2
        if: ${{ matrix.python-version >= '3.8' }}
        run: |
          pip install cramjam --no-index --find-links dist --force-reinstall
      - name: Python UnitTest
        run: |
          pip install -r dev-requirements.txt
          make test
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        target: [x64, x86]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.target }}
      - name: Update rustup
        run: rustup self update
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          default: true
      - name: Build
        if: matrix.target == 'x64'
        run: cargo build --release
      - name: Tests
        if: matrix.target == 'x64'
        run: cargo test --no-default-features --release
      - name: Build wheels
        uses: messense/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          args: -i python --release --out dist
      - name: Install built wheel
        run: |
          pip install cramjam --no-index --find-links dist --force-reinstall
      - name: Python UnitTest
        run: |
          pip install -r dev-requirements.txt
          make test
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        target: [x86_64, i686]
    steps:
    - uses: actions/checkout@v2
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        default: true
    - name: Build
      run: cargo build --release
    - name: Tests
      run: cargo test --no-default-features --release
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Audit
      run: cargo install cargo-audit && cargo audit
    - name: Build Wheels
      uses: messense/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        manylinux: auto
        args: -i ${{ matrix.python-version }} --release --out dist
    - name: Python UnitTest
      if: matrix.target == 'x86_64'
      run: |
        pip install cramjam --no-index --find-links dist --force-reinstall
        pip install -r dev-requirements.txt
        make test
    - name: Test no numpy installed works
      if: matrix.target == 'x86_64'
      run: |
        pip uninstall numpy -y
        python -m pytest tests/test_no_numpy.py
    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  linux-cross:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python:
          - '3.7'
          - '3.8'
          - '3.9'
          - '3.10'
          - '3.11'
        target: [aarch64, armv7, s390x, ppc64le]
        include:
          - python: pypy3.7
            target: aarch64
          - python: pypy3.8
            target: aarch64
          - python: pypy3.9
            target: aarch64
    steps:
    - uses: actions/checkout@v2
    - name: Build Wheels
      uses: messense/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        manylinux: auto
        args: -i ${{ matrix.python }} --release --out dist --no-default-features --features=extension-module  # disable mimallocator
    - uses: uraimo/run-on-arch-action@v2.2.0
      # skipped cross compiled pypy wheel tests for now
      if: ${{ !startsWith(matrix.python, 'pypy') }}
      name: Install built wheel
      with:
        arch: ${{ matrix.target }}
        distro: ubuntu20.04
        githubToken: ${{ github.token }}
        # Mount the dist directory as /artifacts in the container
        dockerRunArgs: |
          --volume "${PWD}/dist:/artifacts"
        install: |
          apt-get update
          apt-get install -y --no-install-recommends python3 python3-venv software-properties-common
          add-apt-repository ppa:deadsnakes/ppa
          apt-get update
          apt-get install -y curl python3.7-venv python3.9-venv python3.10-venv python3.11-venv
        run: |
          ls -lrth /artifacts
          PYTHON=python${{ matrix.python }}
          $PYTHON -m venv venv
          venv/bin/pip install -U pip
          venv/bin/pip install cramjam --no-index --find-links /artifacts --force-reinstall
          venv/bin/python -c 'import cramjam'
    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  pypy-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python:
          - pypy-3.7
          - pypy-3.8
          - pypy-3.9
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python }}
    - name: Build Wheels
      uses: messense/maturin-action@v1
      with:
        target: ${{ matrix.target }}
        manylinux: auto
        args: -i ${{ matrix.python }} --release --out dist --no-default-features --features=extension-module  # disable mimallocator
    - name: Python UnitTest
      run: |
        pip install cramjam --no-index --find-links dist
        pypy -c "import cramjam"
    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  pypy-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [ pypy-3.7, pypy-3.8, pypy-3.9 ]
    steps:
    - uses: actions/checkout@v2
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        default: true
    - uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install maturin
      run: pip install maturin
    - name: Build Wheels
      run: |
        make pypy-build
        ls -l dist
    - name: Python UnitTest
      run: |
        pip install cramjam --no-index --find-links dist
        pypy -c "import cramjam"
    - name: Upload wheels
      uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: dist

  release:
    name: Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [ macos, windows, linux, linux-cross, pypy-linux, pypy-macos ]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Publish to PyPi
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade wheel pip setuptools twine
          twine upload --skip-existing *
