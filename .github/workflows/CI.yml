name: CI

on:
  pull_request:
  release:
    types:
      - released
      - prereleased

jobs:
  build-test:
    runs-on: ${{ matrix.conf.os }}
    name: ${{ matrix.conf.os }}-${{ matrix.package.name }}-${{ matrix.conf.target }}-${{ matrix.python-version }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.8'] #, '3.9', '3.10', '3.11', '3.12', 'pypy3.9', 'pypy3.10']
        package:
          - dir: cramjam-python
            name: cramjam
          # - dir: cramjam-cli
          #   name: cramjam-cli
        target:
          - x86_64
          - aarch64
          - i686
          - universal2
          - armv7
          - ppc64le
        manylinux:
          - auto
          - musllinux_1_1
        os:
          - macos-13
          - ubuntu-latest
          - windows-latest

        include:
          - os: windows-latest
            python-architecture: x86
          - os: windows-latest
            python-architecture: x64

        exclude:
          - os: macos-13
            target: i686 
          - os: macos-13
            target: armv7
          - os: macos-13
            target: ppc64le

          - os: windows-latest
            target: ppc64le
          - os: windows-latest
            target: armv7
          - os: windows-latest
            target: universal2

          - os: ubuntu-latest
            target: universal2
          
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.python-architecture }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      # - uses: Swatinem/rust-cache@v2
      #   with:
      #     shared-key: ${{ matrix.conf.os }}-${{ matrix.conf.target-triple }}

      - name: Setup (Mac)
        if: runner.os == 'macOS'
        run: |
          brew install ninja
          echo "MACOSX_DEPLOYMENT_TARGET=10.12" >> $GITHUB_ENV
          echo "BLOSC2_INSTALL_PREFIX=$(pwd)/blosc2" >> $GITHUB_ENV
          echo "DYLD_FALLBACK_LIBRARY_PATH=$(pwd)/blosc2/lib64:$(pwd)/blosc2/lib" >> $GITHUB_ENV

      - name: Setup (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install ninja cmake

          echo "BLOSC2_INSTALL_PREFIX=${{ github.workspace }}\build" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

          $Env:PATH += ";${{ github.workspace }}\build\lib;${{ github.workspace }}\build\lib64;${{ github.workspace }}\build\bin"
          echo "PATH=$Env:PATH" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

          $Env:LIBPATH += ";${{ github.workspace }}\build\lib;${{ github.workspace }}\build\lib64;${{ github.workspace }}\build\bin"
          echo "LIBPATH=$Env:LIBPATH" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

          $Env:LIB += ";${{ github.workspace }}\build\lib;${{ github.workspace }}\build\lib64;${{ github.workspace }}\build\bin"
          echo "LIB=$Env:LIB" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf8 -Append

      - name: Setup (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install ninja-build -y

      - name: Set up Clang (Ubuntu)
        if: runner.os == 'Linux'
        uses: egor-tensin/setup-clang@v1
        with:
          version: 17

      - name: Audit
        if: runner.os == 'Linux'
        run: cargo install cargo-audit && cargo audit

      - name: Rust Tests (MacOS & Windows)
        if: runner.os != 'Linux' && matrix.target == x86_64
        run: cargo test --no-default-features --release

      - name: Rust Tests (Linux)
        if: runner.os == 'Linux' && matrix.target == x86_64
        run: cargo test --no-default-features --release --features static-blosc2

      - name: Build wheel (Linux)
        if: runner.os == 'Linux'
        uses: PyO3/maturin-action@v1
        with:
          target: ${{ matrix.target }}
          manylinux: ${{ matrix.manylinux }}
          args: -i ${{ matrix.python-version }} --release --out dist --manifest-path ${{ matrix.package.dir }}/Cargo.toml --features static-blosc2
          before-script-linux: yum install clang -y

      - name: Build wheel (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install maturin delvewheel

          maturin build `
            -i python `
            --release `
            --out dist `
            --target ${{ matrix.target }}-pc-windows-msvc `
            --manifest-path ${{ matrix.package.dir }}/Cargo.toml

          # Repair wheel
          $file = Get-ChildItem -Path ".\dist\" -Filter "*.whl" | Select-Object -First 1
          if ($file -ne $null) {
              & delvewheel repair -v $file.FullName -w dist
          } else {
              Write-Host "No .whl file found in the dist directory."
          }

          # Remove location of blosc2 to ensure fixing wheel works
          Remove-Item -Path $env:BLOSC2_INSTALL_PREFIX -Recurse -Force

      - name: Build wheel (MacOS)
        if: runner.os == 'macOS'
        run: |
          python -m pip install maturin delocate

          maturin build \
            -i python \
            --release \
            --out dist \
            --sdist \
            --target ${{ matrix.target }}-apple-darwin \
            --manifest-path ${{ matrix.package.dir }}/Cargo.toml

          delocate-wheel -v dist/*.whl

          # Ensure wheel isn't linking to something we've built outside of it
          rm -rf $BLOSC2_INSTALL_PREFIX

      - name: Install built wheel and Test (Native)
        if: matrix.target == 'x86_64' || matrix.target == 'i686'
        run: |
          python -m pip install ${{ matrix.package.name }}[dev] --pre --find-links dist --force-reinstall
          python -m pytest ${{ matrix.package.dir }} -vs --benchmark-skip

      - name: Install built wheel and Test (Cross)
        if: runner.os == 'Linux' && (matrix.target == 'x86_64' || matrix.target == 'i686')
        uses: uraimo/run-on-arch-action@v2.3.0
        with:
          arch: ${{ matrix.target }}
          distro: ubuntu20.04
          githubToken: ${{ github.token }}
          # Mount the dist directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/dist:/artifacts"
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-venv software-properties-common
            add-apt-repository ppa:deadsnakes/ppa
            apt-get update
            apt-get install -y curl python${{ matrix.python-version }}-venv
          run: |
            ls -lrth /artifacts
            PYTHON=python${{ matrix.python-version }}
            $PYTHON -m venv venv
            venv/bin/pip install -U pip
            venv/bin/pip install ${{ matrix.package.name }} --pre --find-links /artifacts --force-reinstall

            if ["${{ matrix.package.name }}" = "cramjam"]; then
              venv/bin/python -c 'import cramjam'
            else
              venv/bin/cramjam-cli --help
            fi

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: dist
          overwrite: true

  pypi-publish:
      name: Upload ${{ matrix.package }} release to PyPI
      strategy:
        fail-fast: false
        matrix:
          package: 
            - cramjam
            - cramjam-cli
      runs-on: ubuntu-latest
      if: "startsWith(github.ref, 'refs/tags/')"
      needs: [build-test]
      environment:
        name: pypi
        url: https://pypi.org/p/${{ matrix.package }}
      permissions:
        id-token: write
      steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels
      - name: Separate packages into directories
        run: |
          ls -l

          mkdir artifacts-cramjam-cli
          mv cramjam_cli* artifacts-cramjam-cli/
          ls -l artifacts-cramjam-cli/

          mkdir artifacts-cramjam
          mv cramjam* artifacts-cramjam/
          ls -l artifacts-cramjam/

          ls -l

      - name: Publish package distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          skip-existing: true
          packages-dir: artifacts-${{ matrix.package }}/
